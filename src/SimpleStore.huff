// 32 bytes memory store 
// first word => offset
// second word => length
// third word => data, byte, right padding
// memory schema, length, byte => 

// 0x000000000000000000000000000000000000000d48656c6c6f2c20776f726c6421

// FREE_STORAGE_POINTER  <abstract>
// #define constant STORAGE_SLOT0 = FREE_STORAGE_POINTER()
// #define constant STORAGE_SLOT1 = FREE_STORAGE_POINTER()
// #define constant STORAGE_SLOT2 = FREE_STORAGE_POINTER()

// storage slot => contract state maintained by EVM in slots => Compile time 
// Compile time => STORAGE_SLOT0 = 0, STORAGE_SLOT1 = 1, STORAGE_SLOT2 = 2

#define constant VALUE = FREE_STORAGE_POINTER()

// // [VALUE], [ ] <- references to slotes <- slots = 5
// #define macro SET_5() = takes(0), returns(0) {
//     0x05    // PUSH1 0x05
//     [VALUE] // SSTORE
//     sstore
// }

// // Reading from storage, sstore => sload 
// #define macro SET_5_READ_5() = takes(0) returns(0) {
//     0x5
//     [VALUE]
//     sstore

//     [VALUE]     // SLOAD sltos:5
//     sload
// }


// simple Storage Implementatins
#define function setValue(uint256) nonpayable returns ()
#define function getValue() nonpayable returns (uint256)

#define macro SET_VALUE() = takes(0) returns(0) {
    0x04
    calldataload

    // get pointer, store
    [VALUE]
    sstore
}

#define macro GET_VALUE() = takes(0) returns(0) {
    // read value storage 32byte
    [VALUE]
    sload

    // store => return value (memory)
    0x00
    mstore
    
    // return 32bytes memory 
    0x20
    0x00
    return
}

#define macro MAIN() = takes(0) returns(0) {
    // functions selector
    0x00 calldataload 0xe0 shr

    dup1 __FUNC_SIG(setValue) eq setValue jumpi
    dup1 __FUNC_SIG(getValue) eq getValue jumpi

    // dispatch
    setValue:
        SET_VALUE()
    getValue:
        GET_VALUE()
        
    0x00 0x00 revert
}